using DG.Tweening;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Rendering;

public class Fungi : MonoBehaviour
{
    public NavMeshAgent agent;
    public List<Transform> waypoints;
    public enum State { Listening, Walking, Following, Waiting }
    public Sequence sequence;
    public AgentLinkMover agentLinkMover;
    private State state;

    private void Awake()
    {
        agent = GetComponent<NavMeshAgent>();
        agentLinkMover = GetComponent<AgentLinkMover>();
        state = State.Following;
        sequence = DOTween.Sequence();
    }

    public void FollowPath(List<Transform> points) => StartCoroutine(FollowPath_(points));
    IEnumerator FollowPath_(List<Transform> points)
    {
        waypoints = new(points);

        foreach (Transform point in waypoints)
        {
            if(DetectMyself(point)) { yield return sequence.WaitForKill(); continue; }
            yield return StartCoroutine(SecureAPath(point));
        }

        ChangeState(State.Waiting);
        foreach (Transform point in waypoints)
            Destroy(point.gameObject);
        agent.ResetPath();
        waypoints = new();
    }

    public void FollowPlayer(Transform point) => StartCoroutine(FollowPlayer_(point));
    IEnumerator FollowPlayer_(Transform point)
    {
        yield return StartCoroutine(SecureAPath(point, 1, State.Following));
        if (state != State.Waiting) ChangeState(State.Following);
        else agent.ResetPath();
    }

    IEnumerator SecureAPath(Transform point, float targetMargin = 0, State newState = State.Walking)
    {
        ChangeState(State.Walking);
        yield return null;
        while (true)
        {
            agent.SetDestination(point.position);
            yield return null;

            yield return StartCoroutine(NoPath(point, newState, targetMargin));
            if (finalized) break;
            yield return StartCoroutine(CheckPath(point, false));
            if (thereIsAPath) break;
        }
    }

    IEnumerator NoPath(Transform point, State newState = State.Walking, float targetTolerance = 0)
    {
        yield return StartCoroutine(CheckPath(point, true, newState, targetTolerance));
        if (thereIsAPath) yield break;

        while (agentLinkMover.IsJumping) yield return null;
        ChangeState(State.Waiting);
        NoTween(3, 0.2f);
        if (sequence.IsActive()) yield return sequence.WaitForKill();
    }

    bool thereIsAPath = false;
    bool finalized = false;
    IEnumerator CheckPath(Transform point, bool findingPath, State newState = State.Walking, float targetTolerance = 0)
    {
        finalized = false;
        if (findingPath) print(gameObject.name + ": Buscando camino");
        else print(gameObject.name + ": Conservando camino");

        NavMeshPath path = new();
        agent.CalculatePath(point.position, path);
        if (path.corners.Length != 0) agent.SetDestination(path.corners[^1]);

        yield return null;
        float lastSpeed = 0;
        float minVelocity = 0.001f; 
        float speedLimit = agent.speed * agent.speed * 0.1f;
        float velocity = new Vector2(agent.velocity.x, agent.velocity.z).magnitude;

        float time = 0;
        while (velocity <= minVelocity && time < 0.2f)
        {
            time += Time.deltaTime;
            velocity = new Vector2(agent.velocity.x, agent.velocity.z).magnitude;
            yield return null;
        }

        print("1 Is jumping? " + agentLinkMover.IsJumping + "  Velocity: " + velocity);
        while (velocity > minVelocity || agentLinkMover.IsJumping)
        {
            if (!findingPath) ChangeState(newState);
            if (velocity <= minVelocity)
                while (agentLinkMover.IsJumping || lastSpeed > speedLimit)
                {
                    lastSpeed = velocity;
                    yield return null;
                }
            lastSpeed = velocity;

            velocity = new Vector2(agent.velocity.x, agent.velocity.z).magnitude;
            print("2 Is jumping? " + agentLinkMover.IsJumping + "  Velocity: " + velocity);

            path = new();
            agent.CalculatePath(point.position, path);
            if (path.corners.Length != 0) agent.SetDestination(path.corners[^1]);

            bool comparison = (path.status == NavMeshPathStatus.PathComplete) && !agent.isPathStale;
            if (!findingPath) comparison = !comparison;

            if (comparison)
            {
                if (findingPath) print(gameObject.name + ": Camino encontrado");
                else print(gameObject.name + ": Camino perdido");

                thereIsAPath = findingPath;
                yield break;
            }

            yield return null;
        }
        thereIsAPath = !findingPath;
        if (findingPath)
        {
            float distance = Vector3.Distance(transform.position, point.position);
            if (distance < agent.stoppingDistance + targetTolerance)
            {
                print(gameObject.name + ": Sea como sea pero llegué");
                ChangeState(newState);
                finalized = true;
                thereIsAPath = true;
            }
            else print(gameObject.name + ": No encontré un camino");
        }
        else print(gameObject.name + ": Camino finalizado");
    }

    bool DetectMyself(Transform point)
    {
        if (point.parent.parent != null)
            if (point.parent.parent.gameObject.Equals(gameObject))
            {
                NoTween(3, 0.2f);
                return true;
            }
        return false;
    }

    void NoTween(int times, float speed)
    {
        sequence.Kill();
        int sign;
        for (int i = 0; i < times; i++)
        {
            sign = 1;
            if (i % 2 == 0) sign = -1;
            sequence = DOTween.Sequence();
            sequence.Insert(i * speed, transform.DOLocalRotate
                                 (transform.eulerAngles + 30 * sign * Vector3.up, speed));
        }
        sequence.Insert(times * speed, transform.DOLocalRotate(transform.eulerAngles, speed));
    }

    public static List<GameObject> corners = new();
    List<GameObject> DebugPath(NavMeshPath path)
    {
        print(gameObject.name + ": " + path.status + 
                                "   Has path: " + agent.hasPath + 
                                "   Path stale: " + agent.isPathStale);

        if (path.corners.Length == 0) return null;
        for (int i = 0; i < path.corners.Length; i++)
        {
            Vector3 corner = path.corners[i];
            GameObject sphere = GameObject.CreatePrimitive(PrimitiveType.Sphere);
            sphere.transform.position = corner;
            DestroyImmediate(sphere.GetComponent<Collider>());
            if (i < path.corners.Length - 1) sphere.transform.localScale = Vector3.one * 0.3f;
            corners.Add(sphere);
        }
        return corners;
    }

    [ContextMenu("Clear path")]
    void ClearCorners()
    {
        foreach (GameObject coner in corners)
            Destroy(coner);
        corners.Clear();
    }

    public void ChangeState(State state)
    {
        if(state == State.Listening || state == State.Waiting) agent.ResetPath();
        this.state = state;
    }

    public bool CompareState(State state)
    {
        return this.state == state;
    }

    public State GetState()
    {
        return state;
    }
}
